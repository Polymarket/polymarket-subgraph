type Question @entity {
  id: ID!

  templateId: BigInt!
  data: String!
  title: String
  outcomes: [String!]
  category: String
  language: String

  arbitrator: Bytes!
  openingTimestamp: BigInt!
  timeout: BigInt!

  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt

  isPendingArbitration: Boolean!
  arbitrationOccurred: Boolean!

  answerFinalizedTimestamp: BigInt

  indexedFixedProductMarketMakers: [FixedProductMarketMaker!]!

  conditions: [Condition!]! @derivedFrom(field: "question")
}

type Category @entity {
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

type Condition @entity {
  id: ID!
  oracle: Bytes!
  questionId: Bytes!
  question: Question
  outcomeSlotCount: Int!
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  fixedProductMarketMakers: [FixedProductMarketMaker!]! @derivedFrom(field: "conditions")
}

type FixedProductMarketMaker @entity {
  id: ID!

  creator: Bytes!
  creationTimestamp: BigInt!

  collateralToken: Bytes!
  conditions: [Condition!]!
  fee: BigInt!

  collateralVolume: BigInt!
  scaledCollateralVolume: BigDecimal!
  outcomeTokenAmounts: [BigInt!]!
  outcomeSlotCount: Int
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!

  lastActiveDay: BigInt!
  runningDailyVolume: BigInt!
  scaledRunningDailyVolume: BigDecimal!
  lastActiveDayAndRunningDailyVolume: BigInt!
  lastActiveDayAndScaledRunningDailyVolume: BigInt!

  collateralVolumeBeforeLastActiveDay: BigInt!

  indexedOnQuestion: Boolean!

  totalSupply: BigInt!
  # copy of conditions' content if it is a 1-large array
  condition: Condition
  # lifted from condition
  question: Question
  # lifted from condition's question
  templateId: BigInt
  data: String
  title: String
  outcomes: [String!]
  category: String
  language: String
  arbitrator: Bytes
  openingTimestamp: BigInt
  timeout: BigInt
  # pushed from condition & question if this fpmm one of the first
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt
  isPendingArbitration: Boolean
  arbitrationOccurred: Boolean
  answerFinalizedTimestamp: BigInt

  poolMembers: [FpmmPoolMembership!] @derivedFrom(field: "pool")
  participants: [FpmmParticipation!] @derivedFrom(field: "fpmm")
}

type FpmmPoolMembership @entity {
  id: ID!
  pool: FixedProductMarketMaker!
  funder: Account!
  amount: BigInt!
}

type FpmmParticipation @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  participant: Account!
}

type Account @entity {
  id: ID!
  fpmmPoolMemberships: [FpmmPoolMembership!] @derivedFrom(field: "funder")
  fpmmParticipations: [FpmmParticipation!] @derivedFrom(field: "participant")
}

type TokenRegistry @entity {
  id: ID!
  markets: [ID!]!
}

type Global @entity {
  # ID is empty string, this is a singleton
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

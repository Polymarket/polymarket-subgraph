# Generic

type Global @entity {
  # ID is empty string, this is a singleton
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

type Account @entity {
  id: ID!
  fpmmPoolMemberships: [FpmmPoolMembership!] @derivedFrom(field: "funder")
  fpmmParticipations: [FpmmParticipation!] @derivedFrom(field: "participant")
}

# Conditional Tokens

type Condition @entity {
  id: ID!
  oracle: Bytes!
  questionId: Bytes!
  outcomeSlotCount: Int!
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  fixedProductMarketMakers: [FixedProductMarketMaker!]!
    @derivedFrom(field: "conditions")
}

type Split @entity {
  id: ID!
  stakeholder: Account!
  collateralToken: Bytes!
  parentCollectionId: Bytes!
  condition: Condition!
  partition: [BigInt!]!
  amount: BigInt!
}

type Merge @entity {
  id: ID!
  stakeholder: Account!
  collateralToken: Bytes!
  parentCollectionId: Bytes!
  condition: Condition!
  partition: [BigInt!]!
  amount: BigInt!
}

type Redemption @entity {
  id: ID!
  redeemer: Account!
  collateralToken: Bytes!
  parentCollectionId: Bytes!
  condition: Condition!
  indexSets: [BigInt!]!
  payout: BigInt!
}

# Market Makers

type FixedProductMarketMaker @entity {
  id: ID!

  creator: Bytes!
  creationTimestamp: BigInt!

  collateralToken: Bytes!
  conditions: [Condition!]!
  fee: BigInt!

  collateralVolume: BigInt!
  scaledCollateralVolume: BigDecimal!
  outcomeTokenAmounts: [BigInt!]!
  outcomeSlotCount: Int
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!

  lastActiveDay: BigInt!
  runningDailyVolume: BigInt!
  scaledRunningDailyVolume: BigDecimal!
  lastActiveDayAndRunningDailyVolume: BigInt!
  lastActiveDayAndScaledRunningDailyVolume: BigInt!

  collateralVolumeBeforeLastActiveDay: BigInt!

  indexedOnQuestion: Boolean!

  totalSupply: BigInt!

  poolMembers: [FpmmPoolMembership!] @derivedFrom(field: "pool")
  participants: [FpmmParticipation!] @derivedFrom(field: "fpmm")
}

type FpmmFundingAddition @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  funder: Account!
  sharesMinted: BigInt!
}

type FpmmFundingRemoval @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  funder: Account!
  sharesBurnt: BigInt!
}

type FpmmBuy @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  buyer: Account!
  investmentAmount: BigInt!
  feeAmount: BigInt!
  outcomeIndex: BigInt!
  outcomeTokensBought: BigInt!
}

type FpmmSell @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  seller: Account!
  returnAmount: BigInt!
  feeAmount: BigInt!
  outcomeIndex: BigInt!
  outcomeTokensSold: BigInt!
}

type FpmmPoolMembership @entity {
  id: ID!
  pool: FixedProductMarketMaker!
  funder: Account!
  amount: BigInt!
}

type FpmmParticipation @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  participant: Account!
}

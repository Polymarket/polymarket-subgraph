# Generic

type Global @entity {
  # ID is empty string, this is a singleton
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

type Account @entity {
  id: ID!
  "markets in which user has provided liquidity"
  fpmmPoolMemberships: [FpmmPoolMembership!] @derivedFrom(field: "funder")
  marketPositions: [MarketPosition!] @derivedFrom(field: "user")
  transactions: [Transaction!] @derivedFrom(field: "user")
  redemptions: [Redemption!] @derivedFrom(field: "redeemer")
}

type Collateral @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

# Conditional Tokens

type Condition @entity {
  id: ID!
  "Address which can resolve this condition"
  oracle: Bytes!
  questionId: Bytes!
  outcomeSlotCount: Int!
  resolutionTimestamp: BigInt
  "Fraction of collateral assigned to each outcome"
  payouts: [BigDecimal!]
  payoutNumerators: [BigInt!]
  payoutDenominator: BigInt
  "Market makers which are trading on this condition"
  fixedProductMarketMakers: [FixedProductMarketMaker!]!
}

type Split @entity {
  id: ID!
  "Address which is performing this split"
  stakeholder: Account!
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  condition: Condition!
  partition: [BigInt!]!
  amount: BigInt!
}

type Merge @entity {
  id: ID!
  "Address which is performing this merge"
  stakeholder: Account!
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  condition: Condition!
  partition: [BigInt!]!
  amount: BigInt!
}

type Redemption @entity {
  id: ID!
  "Address which is redeeming these outcomes"
  redeemer: Account!
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  condition: Condition!
  "Outcomes which are being redeemed"
  indexSets: [BigInt!]!
  payout: BigInt!
}

# Market Makers

type FixedProductMarketMaker @entity {
  id: ID!

  "Address which deployed this market"
  creator: Bytes!
  "Time at which this market was deployed"
  creationTimestamp: BigInt!

  collateralToken: Collateral!
  conditions: [Condition!] @derivedFrom(field: "fixedProductMarketMakers")
  "Percentage fee of trades taken by market maker. A 2% fee is represented as 2*10^16"
  fee: BigInt!

  collateralVolume: BigInt!
  "Volume scaled by the number of decimals of collateralToken"
  scaledCollateralVolume: BigDecimal!
  feeVolume: BigInt!
  "fees scaled by the number of decimals of collateralToken"
  scaledFeeVolume: BigDecimal!

  "Constant product parameter k"
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!

  "Balances of each outcome token held by the market maker"
  outcomeTokenAmounts: [BigInt!]!
  "Prices at which market maker values each outcome token"
  outcomeTokenPrices: [BigDecimal!]!
  "Number of outcomes which this market maker is trading"
  outcomeSlotCount: Int

  "Timestamp of last day during which someone made a trade"
  lastActiveDay: BigInt!
  runningDailyVolume: BigInt!
  scaledRunningDailyVolume: BigDecimal!
  lastActiveDayAndRunningDailyVolume: BigInt!
  lastActiveDayAndScaledRunningDailyVolume: BigInt!

  collateralVolumeBeforeLastActiveDay: BigInt!

  "Number of shares for tokens in the market maker's reserves"
  totalSupply: BigInt!

  poolMembers: [FpmmPoolMembership!] @derivedFrom(field: "pool")
}

type MarketPosition @entity {
  id: ID!
  market: FixedProductMarketMaker!
  user: Account!
  outcomeIndex: BigInt!
  "number of outcome shares that the user has bought and sold"
  quantityBought: BigInt!
  quantitySold: BigInt!
  netQuantity: BigInt!
  "total value paid by the user to enter this position"
  valueBought: BigInt!
  valueSold: BigInt!
  netValue: BigInt!
}

type FpmmFundingAddition @entity {
  id: ID!
  timestamp: BigInt!
  fpmm: FixedProductMarketMaker!
  funder: Account!
  amountsAdded: [BigInt!]!
  amountsRefunded: [BigInt!]!
  sharesMinted: BigInt!
}

type FpmmFundingRemoval @entity {
  id: ID!
  timestamp: BigInt!
  fpmm: FixedProductMarketMaker!
  funder: Account!
  amountsRemoved: [BigInt!]!
  collateralRemoved: BigInt!
  sharesBurnt: BigInt!
}

type Transaction @entity {
  id: ID!
  type: String!
  timestamp: BigInt!
  market: FixedProductMarketMaker!
  user: Account!
  tradeAmount: BigInt!
  feeAmount: BigInt!
  outcomeIndex: BigInt!
  outcomeTokensAmount: BigInt!
}

type FpmmPoolMembership @entity {
  id: ID!
  pool: FixedProductMarketMaker!
  funder: Account!
  amount: BigInt!
}
